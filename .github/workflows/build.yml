# Copyright 2020 Serghei Iakovlev <egrep@protonmail.ch>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: build

on: [push, pull_request]

jobs:
  simple_build:
    # To prevent build a particular commit use
    #     git commit -m "......... [ci skip]"
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    name: "${{ matrix.toolchain }}: ${{ matrix.build-type }} ${{ matrix.generator }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:

        include:
          - toolchain: linux-gcc-7
            build-type: Debug
            os: ubuntu-18.04
            compiler: gcc
            arch: x86_64
            version: '7'
            generator: Unix Makefiles

          - toolchain: linux-gcc-7
            build-type: Asan
            os: ubuntu-18.04
            compiler: gcc
            arch: x86_64
            version: '7'
            generator: Unix Makefiles

          - toolchain: linux-gcc-7
            build-type: Ubsan
            os: ubuntu-18.04
            compiler: gcc
            arch: x86_64
            version: '7'
            generator: Unix Makefiles

          - toolchain: linux-clang-5.0
            build-type: Debug
            os: ubuntu-18.04
            compiler: clang
            arch: x86_64
            version: '5.0'
            generator: Unix Makefiles

          - toolchain: macos-clang-11.0
            build-type: Debug
            os: macos-10.15
            compiler: apple-clang
            arch: x86_64
            version: '11.0'
            generator: Unix Makefiles

          - toolchain: windows-msvc-16
            build-type: Debug
            os: windows-2019
            compiler: msvc
            arch: x86_64
            version: '16'
            generator: Visual Studio 16 2019

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Setup Common Prerequisites (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          # Prune unneeded ppas
          bash .ci/prune-ppas.sh

          # Add more toolchains
          echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
          sudo apt-get update --quiet --yes 1>/dev/null

          # Install compiler
          source .ci/install-compiler-ubuntu.sh \
            "${{ matrix.compiler }}" "${{ matrix.version }}"

          # Install cppcheck
          sudo snap install cppcheck

          # Install common tools
          sudo apt-get install --no-install-recommends -q -y chrpath

      - name: Setup Common Prerequisites (macOS)
        if: startsWith(runner.os, 'macOS')
        run: |
          sudo xcode-select -switch /Applications/Xcode.app

          echo "CC=$(xcrun -f clang)" >> $GITHUB_ENV
          echo "CXX=$(xcrun -f clang++)" >> $GITHUB_ENV
          echo "SDKROOT=$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_ENV

          echo "$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_PATH

          # Install common tools
          brew install cppcheck

      - name: Setup chocolatey Cache (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-chocolatey-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-${{ matrix.os }}-
            ${{ runner.os }}-chocolatey-

      - name: Setup Common Prerequisites (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          # Install common tools
          choco install --no-progress -y cppcheck
          Add-Content -Path $env:GITHUB_PATH -Value 'C:\Program Files\Cppcheck'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: x64

      - name: Get PIP Cache Key
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; \
                  print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: Setup pip Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify Toolchain Version
        run: cmake --version && conan --version

      - name: Setting Up Build Vars
        shell: bash
        run: echo "CONAN_USER_HOME=$(conan config home)" >> $GITHUB_ENV

      - name: Setup Conan Cache
        id: conan-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: ${{ runner.os }}-conan-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.compiler }}-

      - name: Configure Conan
        shell: bash
        run: |
          mkdir -p "${{ env.CONAN_USER_HOME }}/.conan/profiles"

          # WARN: Remotes registry file missing, creating default one
          cp tools/conan/remotes.json "${{ env.CONAN_USER_HOME }}/.conan/remotes.json"

          # Install conan profiles
          cp tools/conan/profiles/* "${{ env.CONAN_USER_HOME }}/.conan/profiles/"
          conan profile list

      - name: Install The Requirements Using Conan
        run: >-
          conan
          install .
          --install-folder build
          --profile ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.build-type }}
          --build missing

      - name: 'Configure (${{ matrix.arch }} ${{ matrix.build-type }})'
        shell: bash
        # TODO(serghei): Replace hardcoded '-A x64' using matrix.arch
        run: >-
          cmake -S .
          -B build
          -G "${{ matrix.generator }}" $( (( "${{ matrix.generator }}" = "Visual Studio 16 2019" )) && printf %s '-A x64' )
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          -DCPPCHECK=ON
          -DWITH_TESTS=ON
          -DWARNINGS_AS_ERRORS=ON
          -DCMAKE_INSTALL_PREFIX="$(pwd)/install"

      - name: Build with ${{ matrix.compiler }}
        run: cmake --build build --config ${{ matrix.build-type }}

      - name: Analyze Build (Unix)
        if: startsWith(runner.os, 'Windows') == false
        run: bash .ci/objanalyze.sh stars

      - name: Install Program (Unix)
        if: startsWith(runner.os, 'Windows') == false
        run: sudo cmake --build build --target install

      - name: Install Program (Windows)
        if: startsWith(runner.os, 'Windows')
        run: cmake --build build --target install

      - name: Analyze Install (Unix)
        if: startsWith(runner.os, 'Windows') == false
        run: bash .ci/objanalyze.sh stars ${{ github.workspace }}/install

      - name: Minimal Load Test (Unix)
        if: startsWith(runner.os, 'Windows') == false
        working-directory: ./install/bin
        run: |
          ./stars --version
          for i in {1..10}; do ./stars; done

      - name: Minimal Load Test (Windows)
        if: startsWith(runner.os, 'Windows')
        working-directory: .\install\bin
        run: |
          .\stars.exe --version
          1..10 | % { .\stars.exe }

      - name: Success Reporting
        if: success()
        run: git log --format=fuller -5
