# Copyright 2020 Serghei Iakovlev <egrep@protonmail.ch>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: build

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
    pull_request:
      branches:
        - master
        - development

jobs:
  simple_build:
    name: "${{ matrix.project }}: ${{ matrix.toolchain }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        toolchain:
          - linux-gcc-7
          - linux-clang-5.0
          - macos-clang-11.0

        project:
          - stars

        include:
          - toolchain: linux-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            arch: x86_64
            version: '7'

          - toolchain: linux-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            arch: x86_64
            version: '5.0'

          - toolchain: macos-clang-11.0
            os: macos-10.15
            compiler: apple-clang
            arch: x86_64
            version: '11.0'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Read Project Specification
        working-directory: ${{ matrix.project }}
        run: source "$GITHUB_WORKSPACE/.ci/export-spec-variables.sh"

      - name: Setup Common Prerequisites (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          # Prune unneeded ppas
          bash .ci/prune-ppas.sh

          # Add more toolchains
          echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
          sudo apt-get update --quiet --yes 1>/dev/null

          # Install compiler
          source .ci/install-compiler-ubuntu.sh \
            "${{ matrix.compiler }}" "${{ matrix.version }}"

          # Install cppcheck
          sudo snap install cppcheck

          # Install common tools
          sudo apt-get install --no-install-recommends -q -y chrpath

      - name: Setup Common Prerequisites (macOS)
        if: startsWith(runner.os, 'macOS')
        run: |
          sudo xcode-select -switch /Applications/Xcode.app

          echo "::set-env name=CC::$(xcrun -f clang)"
          echo "::set-env name=CXX::$(xcrun -f clang++)"
          echo "::set-env name=SDKROOT::$(xcodebuild -version -sdk macosx Path)"
          echo "::set-env name=PATH::$(dirname $(xcrun -f clang)):$PATH"

          # Install common tools
          brew install cppcheck

      - name: Setup Project Prerequisites (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          # Install Ninja
          if [ ${{ env.WITH_NINJA }} -eq 1 ]; then
            sudo apt-get install --no-install-recommends -q -y ninja-build
          fi

      - name: Setup Project Prerequisites (macOS)
        if: startsWith(runner.os, 'macOS')
        run: |
          # Install Ninja
          if [ ${{ env.WITH_NINJA }} -eq 1 ]; then
            brew install ninja
          fi

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: x64

      - name: Get PIP Cache Key
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; \
                  print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: Setup pip Cache
        id: analysis-tools-pip-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python Dependencies
        working-directory: ${{ matrix.project }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify Toolchain Version
        run: $CC --version && cmake --version && conan --version

      - name: Setup Conan Cache
        id: conan-cache
        uses: actions/cache@v2
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-conan-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.compiler }}-

      - name: Setting Up Build Vars
        run: |
          if [ "${{ env.WITH_NINJA }}" = 1 ]; then
            echo "::set-env name=BUILD_PREFIX::-ninja"
          else
            echo "::set-env name=BUILD_PREFIX::"
          fi

          echo "::set-env name=CONAN_USER_HOME::$(conan config home)"

      - name: Configure Conan
        working-directory: ${{ matrix.project }}
        run: |
          mkdir -p "${{ env.CONAN_USER_HOME }}/profiles"

          # WARN: Remotes registry file missing, creating default one
          cp tools/conan/remotes.json "${{ env.CONAN_USER_HOME }}/remotes.json"

          # Install conan profiles
          cp --verbose tools/conan/profiles/* "${{ env.CONAN_USER_HOME }}/profiles"
          conan profile list

      - name: Install The Requirements Using Conan
        working-directory: ${{ matrix.project }}
        run: >-
          conan
          install .
          -if=build
          -pr=${{ runner.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-${{ matrix.version }}-debug${{ env.BUILD_PREFIX }}
          --build=missing

      - name: Configure x64 Debug
        working-directory: ${{ matrix.project }}
        run: >-
          cmake
          -S .
          -Bbuild $( (( "${{ env.WITH_NINJA }}" == 1 )) && printf %s '-GNinja' )
          -DCMAKE_BUILD_TYPE=Debug
          -DCPPCHECK=ON
          -DWARNINGS_AS_ERRORS=ON
          -DCMAKE_INSTALL_PREFIX=/opt/${{ matrix.project }}
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build with ${{ matrix.compiler }}
        working-directory: ${{ matrix.project }}
        run: cmake --build build

      - name: Analyze Build
        working-directory: ${{ matrix.project }}
        run: bash "$GITHUB_WORKSPACE/.ci/objanalyze.sh" ${{ matrix.project }}

      - name: Install Program
        working-directory: ${{ matrix.project }}
        run: sudo cmake --build build --target install

      - name: Analyze Install
        working-directory: ${{ matrix.project }}
        run: bash "$GITHUB_WORKSPACE/.ci/objanalyze.sh" ${{ matrix.project }} /opt/${{ matrix.project }}

      - name: Minimal Load Test
        working-directory: /opt/${{ matrix.project }}/bin
        run: ./${{ matrix.project }}

      - name: Success Reporting
        if: success()
        run: git log --format=fuller -5
