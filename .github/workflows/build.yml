# Copyright 2020 Serghei Iakovlev <egrep@protonmail.ch>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: build

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
    pull_request:
      branches:
        - master
        - development

jobs:
  simple_build:
    name: "${{ matrix.project }}: ${{ matrix.toolchain }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        toolchain:
          - linux-gcc-7
          - linux-clang-5.0
          - macOS-latest

        project:
          - cmake-sqlite-conan

        include:
          - toolchain: linux-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            libcxx: libstdc++11
            version: '7'

          - toolchain: linux-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            libcxx: libstdc++11
            version: '5.0'

          - toolchain: macOS-latest
            os: macOS-latest
            compiler: apple-clang
            libcxx: libc++
            version: '11.0'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Setup Prerequisites (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          # Prune unneeded ppas
          bash "$GITHUB_WORKSPACE/.ci/prune-ppas.sh"

          # Add more toolchains
          echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
          sudo apt-get update --quiet --yes 1>/dev/null

          # Install compiler
          source "$GITHUB_WORKSPACE/.ci/install-compiler-ubuntu.sh" \
            "${{ matrix.compiler }}" "${{ matrix.version }}"

          # Install build tools
          sudo apt-get install --no-install-recommends -q -y ninja-build

      - name: Setup Prerequisites (macOS)
        if: startsWith(runner.os, 'macOS')
        run: |
          sudo xcode-select -switch /Applications/Xcode.app

          # Install build tools
          brew install ninja

          echo "::set-env name=CC::$(xcrun -f clang)"
          echo "::set-env name=CXX::$(xcrun -f clang++)"
          echo "::set-env name=SDKROOT::$(xcodebuild -version -sdk macosx Path)"
          echo "::set-env name=PATH::$(dirname $(xcrun -f clang)):$PATH"

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: x64

      - name: Get PIP Cache Key
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; \
                  print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: Setup pip Cache
        id: analysis-tools-pip-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ matrix.project }}/requirements.txt

      - name: Configure x64 Debug
        run: |
          $CC --version
          cmake --version

          pushd "${{ matrix.project }}"

          cmake \
            -S . \
            -Bbuild \
            -DCMAKE_BUILD_TYPE=Debug \
            -GNinja

          popd

      - name: Build with ${{ matrix.compiler }}
        run: |
          pushd "${{ matrix.project }}"
          cmake --build build -j "$(getconf _NPROCESSORS_ONLN)"
          popd

      - name: Success Reporting
        if: success()
        run: git log --format=fuller -5
